package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.74

import (
	"budsafe/backend/graph/generated"
	"budsafe/backend/graph/model"
	"context"
	"fmt"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.CreateUserInput) (*model.User, error) {
	panic(fmt.Errorf("not implemented: CreateUser - createUser"))
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id string, input model.UpdateUserInput) (*model.User, error) {
	panic(fmt.Errorf("not implemented: UpdateUser - updateUser"))
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteUser - deleteUser"))
}

// CreateBusiness is the resolver for the createBusiness field.
func (r *mutationResolver) CreateBusiness(ctx context.Context, input model.CreateBusinessInput) (*model.Business, error) {
	panic(fmt.Errorf("not implemented: CreateBusiness - createBusiness"))
}

// UpdateBusiness is the resolver for the updateBusiness field.
func (r *mutationResolver) UpdateBusiness(ctx context.Context, id string, input model.UpdateBusinessInput) (*model.Business, error) {
	panic(fmt.Errorf("not implemented: UpdateBusiness - updateBusiness"))
}

// DeleteBusiness is the resolver for the deleteBusiness field.
func (r *mutationResolver) DeleteBusiness(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteBusiness - deleteBusiness"))
}

// CreateLicense is the resolver for the createLicense field.
func (r *mutationResolver) CreateLicense(ctx context.Context, input model.CreateLicenseInput) (*model.License, error) {
	panic(fmt.Errorf("not implemented: CreateLicense - createLicense"))
}

// UpdateLicense is the resolver for the updateLicense field.
func (r *mutationResolver) UpdateLicense(ctx context.Context, id string, input model.UpdateLicenseInput) (*model.License, error) {
	panic(fmt.Errorf("not implemented: UpdateLicense - updateLicense"))
}

// DeleteLicense is the resolver for the deleteLicense field.
func (r *mutationResolver) DeleteLicense(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteLicense - deleteLicense"))
}

// CreateLocation is the resolver for the createLocation field.
func (r *mutationResolver) CreateLocation(ctx context.Context, input model.CreateLocationInput) (*model.Location, error) {
	panic(fmt.Errorf("not implemented: CreateLocation - createLocation"))
}

// UpdateLocation is the resolver for the updateLocation field.
func (r *mutationResolver) UpdateLocation(ctx context.Context, id string, input model.UpdateLocationInput) (*model.Location, error) {
	panic(fmt.Errorf("not implemented: UpdateLocation - updateLocation"))
}

// DeleteLocation is the resolver for the deleteLocation field.
func (r *mutationResolver) DeleteLocation(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteLocation - deleteLocation"))
}

// CreateComplianceCheck is the resolver for the createComplianceCheck field.
func (r *mutationResolver) CreateComplianceCheck(ctx context.Context, input model.CreateComplianceCheckInput) (*model.ComplianceCheck, error) {
	panic(fmt.Errorf("not implemented: CreateComplianceCheck - createComplianceCheck"))
}

// UpdateComplianceCheck is the resolver for the updateComplianceCheck field.
func (r *mutationResolver) UpdateComplianceCheck(ctx context.Context, id string, input model.UpdateComplianceCheckInput) (*model.ComplianceCheck, error) {
	panic(fmt.Errorf("not implemented: UpdateComplianceCheck - updateComplianceCheck"))
}

// DeleteComplianceCheck is the resolver for the deleteComplianceCheck field.
func (r *mutationResolver) DeleteComplianceCheck(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteComplianceCheck - deleteComplianceCheck"))
}

// CreateRenewalRequirement is the resolver for the createRenewalRequirement field.
func (r *mutationResolver) CreateRenewalRequirement(ctx context.Context, input model.CreateRenewalRequirementInput) (*model.RenewalRequirement, error) {
	panic(fmt.Errorf("not implemented: CreateRenewalRequirement - createRenewalRequirement"))
}

// UpdateRenewalRequirement is the resolver for the updateRenewalRequirement field.
func (r *mutationResolver) UpdateRenewalRequirement(ctx context.Context, id string, input model.UpdateRenewalRequirementInput) (*model.RenewalRequirement, error) {
	panic(fmt.Errorf("not implemented: UpdateRenewalRequirement - updateRenewalRequirement"))
}

// CompleteRenewalRequirement is the resolver for the completeRenewalRequirement field.
func (r *mutationResolver) CompleteRenewalRequirement(ctx context.Context, id string) (*model.RenewalRequirement, error) {
	panic(fmt.Errorf("not implemented: CompleteRenewalRequirement - completeRenewalRequirement"))
}

// CreateDocument is the resolver for the createDocument field.
func (r *mutationResolver) CreateDocument(ctx context.Context, input model.CreateDocumentInput) (*model.Document, error) {
	panic(fmt.Errorf("not implemented: CreateDocument - createDocument"))
}

// DeleteDocument is the resolver for the deleteDocument field.
func (r *mutationResolver) DeleteDocument(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteDocument - deleteDocument"))
}

// MarkNotificationAsRead is the resolver for the markNotificationAsRead field.
func (r *mutationResolver) MarkNotificationAsRead(ctx context.Context, id string) (*model.Notification, error) {
	panic(fmt.Errorf("not implemented: MarkNotificationAsRead - markNotificationAsRead"))
}

// MarkAllNotificationsAsRead is the resolver for the markAllNotificationsAsRead field.
func (r *mutationResolver) MarkAllNotificationsAsRead(ctx context.Context, userID string) (bool, error) {
	panic(fmt.Errorf("not implemented: MarkAllNotificationsAsRead - markAllNotificationsAsRead"))
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*model.User, error) {
	panic(fmt.Errorf("not implemented: Me - me"))
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	panic(fmt.Errorf("not implemented: Users - users"))
}

// Business is the resolver for the business field.
func (r *queryResolver) Business(ctx context.Context, id string) (*model.Business, error) {
	panic(fmt.Errorf("not implemented: Business - business"))
}

// Businesses is the resolver for the businesses field.
func (r *queryResolver) Businesses(ctx context.Context, filter *model.BusinessFilter) ([]*model.Business, error) {
	panic(fmt.Errorf("not implemented: Businesses - businesses"))
}

// License is the resolver for the license field.
func (r *queryResolver) License(ctx context.Context, id string) (*model.License, error) {
	panic(fmt.Errorf("not implemented: License - license"))
}

// Licenses is the resolver for the licenses field.
func (r *queryResolver) Licenses(ctx context.Context, filter *model.LicenseFilter) ([]*model.License, error) {
	panic(fmt.Errorf("not implemented: Licenses - licenses"))
}

// ExpiringLicenses is the resolver for the expiringLicenses field.
func (r *queryResolver) ExpiringLicenses(ctx context.Context, days int) ([]*model.License, error) {
	panic(fmt.Errorf("not implemented: ExpiringLicenses - expiringLicenses"))
}

// Jurisdiction is the resolver for the jurisdiction field.
func (r *queryResolver) Jurisdiction(ctx context.Context, id string) (*model.Jurisdiction, error) {
	panic(fmt.Errorf("not implemented: Jurisdiction - jurisdiction"))
}

// Jurisdictions is the resolver for the jurisdictions field.
func (r *queryResolver) Jurisdictions(ctx context.Context) ([]*model.Jurisdiction, error) {
	panic(fmt.Errorf("not implemented: Jurisdictions - jurisdictions"))
}

// ComplianceChecks is the resolver for the complianceChecks field.
func (r *queryResolver) ComplianceChecks(ctx context.Context, licenseID string) ([]*model.ComplianceCheck, error) {
	panic(fmt.Errorf("not implemented: ComplianceChecks - complianceChecks"))
}

// ComplianceStatus is the resolver for the complianceStatus field.
func (r *queryResolver) ComplianceStatus(ctx context.Context, businessID string) (*model.ComplianceStatusSummary, error) {
	panic(fmt.Errorf("not implemented: ComplianceStatus - complianceStatus"))
}

// Notifications is the resolver for the notifications field.
func (r *queryResolver) Notifications(ctx context.Context, userID string) ([]*model.Notification, error) {
	panic(fmt.Errorf("not implemented: Notifications - notifications"))
}

// DashboardSummary is the resolver for the dashboardSummary field.
func (r *queryResolver) DashboardSummary(ctx context.Context, businessID string) (*model.DashboardSummary, error) {
	panic(fmt.Errorf("not implemented: DashboardSummary - dashboardSummary"))
}

// Hello is the resolver for the hello field.
func (r *queryResolver) Hello(ctx context.Context) (string, error) {
	return "Hello, BudSafe User!", nil
}

// NotificationAdded is the resolver for the notificationAdded field.
func (r *subscriptionResolver) NotificationAdded(ctx context.Context, userID string) (<-chan *model.Notification, error) {
	panic(fmt.Errorf("not implemented: NotificationAdded - notificationAdded"))
}

// LicenseStatusChanged is the resolver for the licenseStatusChanged field.
func (r *subscriptionResolver) LicenseStatusChanged(ctx context.Context, businessID *string) (<-chan *model.License, error) {
	panic(fmt.Errorf("not implemented: LicenseStatusChanged - licenseStatusChanged"))
}

// ComplianceStatusChanged is the resolver for the complianceStatusChanged field.
func (r *subscriptionResolver) ComplianceStatusChanged(ctx context.Context, businessID *string) (<-chan *model.ComplianceCheck, error) {
	panic(fmt.Errorf("not implemented: ComplianceStatusChanged - complianceStatusChanged"))
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

// Subscription returns generated.SubscriptionResolver implementation.
func (r *Resolver) Subscription() generated.SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
/*
	func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	panic(fmt.Errorf("not implemented: CreateTodo - createTodo"))
}
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	panic(fmt.Errorf("not implemented: Todos - todos"))
}
*/
